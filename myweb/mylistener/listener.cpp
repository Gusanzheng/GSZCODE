#include <listener.h>

int* Utils::u_pipefd = 0;
int Utils::u_epollfd = 0;

void listener::Listen(int m_listenfd)
{
    //?1?7?1?7??1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7utils
    utils.init(TIMESLOT);

    //epoll?1?7?1?7?1?7?1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7
    m_epollfd = epoll_create(5);
    assert(m_epollfd != -1);

    //?1?7?1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7ET???1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7EPOLLONESHOT
    utils.addfd(m_epollfd, m_listenfd, false);

    //?1?7?1?7?1?7??1?7
    int ret = socketpair(PF_UNIX, SOCK_STREAM, 0, m_pipefd);
    assert(ret != -1);

    utils.setnonblocking(m_pipefd[1]);  //?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7
    utils.addfd(m_epollfd, m_pipefd[0], false);  //??1?7??1?7??1?7?1?7?1?7?1?7?1?7?1?7

    //?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7??1?7?1?7?1?7
    utils.addsig(SIGPIPE, SIG_IGN);                     //?1?7?1?7?1?7?1?7SIGPIPE?1?7??1?7
    utils.addsig(SIGALRM, utils.sig_handler, false);    //?1?7?1?7??1?7??1?7
    utils.addsig(SIGTERM, utils.sig_handler, false);    //?1?7?1?7??1?7??1?7

    alarm(TIMESLOT);

    Utils::u_pipefd = m_pipefd;
    Utils::u_epollfd = m_epollfd;
}

void Utils::init(int timeslot)
{
    m_TIMESLOT = timeslot;
}

//?1?7?1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7
int Utils::setnonblocking(int fd)
{
    int old_option = fcntl(fd, F_GETFL);
    int new_option = old_option | O_NONBLOCK;
    fcntl(fd, F_SETFL, new_option);
    return old_option;
}

//?1?7?1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7ET???1?7?1?7??1?7?1?7?1?7??1?7?1?7?1?7EPOLLONESHOT
void Utils::addfd(int epollfd, int fd, bool one_shot)
{
    epoll_event event;
    event.data.fd = fd;
    event.events = EPOLLIN | EPOLLET | EPOLLRDHUP;
    if (one_shot)
        event.events |= EPOLLONESHOT;
    epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &event);
    setnonblocking(fd);
}

//?1?7?1?7?1?7??1?7??1?7?1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7
void Utils::removefd(int epollfd, int fd)
{
    epoll_ctl(epollfd, EPOLL_CTL_DEL, fd, 0);
    close(fd);
}

//?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?EPOLLONESHOT
void Utils::modfd(int epollfd, int fd, int ev)
{
    epoll_event event;
    event.data.fd = fd;
    event.events = ev | EPOLLET | EPOLLONESHOT | EPOLLRDHUP;
    epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, &event);
}

//?1?7???1?7?1?7?1?7?1?7?1?7
//?1?7???1?7?1?7?1?7?1?7?1?7?1?7??1?7?1?7?1?7??1?7?1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7??1?7??1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7???1?7??1?7?1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7???1?7?1?7??1?7??1?7?1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7??1?7?
void Utils::sig_handler(int sig)
{
    //??1?7?1?7??1?7?1?7?1?7?1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7??1?7?1?7?1?7?1?7?1?7??1?7?1?7?1?7?1?7errno
    //?1?7?1?7?1?7?1?7?1?7?1?7?1?7??1?7??1?7???1?7?1?7???1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7???1?7?1?7??1?7?1?7?1?7?1?7?1?7???1?7?1?7?1?7?1?7
    int save_errno = errno;
    int msg = sig;

    //?1?7?1?7?1?7??1?7??1?7???1?7??1?7?1?7??1?7??1?7?1?7?1?7?1?7?1?7??1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7
    send(u_pipefd[1], (char*)&msg, 1, 0);

    //?1?7?1?7??1?7?1?7?1?7?1?7errno?1?7?1?7???1?7?1?7??1?7?1?7errno
    errno = save_errno;
}

//?1?7?1?7?1?7?1?7?1?7???1?7?1?7?1?7
void Utils::addsig(int sig, void(handler)(int), bool restart)
{
    struct sigaction sa;
    memset(&sa, '\0', sizeof(sa));

    //?1?7???1?7?1?7?1?7?1?7?1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7??1?7??1?7?1?7?1?7?1?7?1?7?1?7?1?7??1?7?1?7?1?7?1?7?1?7
    sa.sa_handler = handler;
    if (restart)
        sa.sa_flags |= SA_RESTART;
    //?1?7?1?7?1?7?1?7?1?7?1?7?1?7??1?7?1?7?1?7??1?7?1?7???1?7
    sigfillset(&sa.sa_mask);

    //??1?7?1?7sigaction?1?7?1?7?1?7?1?7
    assert(sigaction(sig, &sa, NULL) != -1);
}

//?1?7?1?7??1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7?1?7??1?7??1?7?1?7??1?7?1?7?1?7SIGALRM?1?7??1?7
void Utils::timer_handler()
{
    m_timer_lst.tick();
    alarm(m_TIMESLOT);
}

void Utils::show_error(int connfd, const char* info)
{
    send(connfd, info, strlen(info), 0);
    close(connfd);
}

